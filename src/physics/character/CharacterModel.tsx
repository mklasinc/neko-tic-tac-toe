/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useImperativeHandle, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GroupProps, useFrame } from '@react-three/fiber'
import { vec3 } from '@react-three/rapier'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    body: THREE.SkinnedMesh
    boots: THREE.SkinnedMesh
    lights_01: THREE.SkinnedMesh
    lights_02: THREE.SkinnedMesh
    lights_03: THREE.SkinnedMesh
    bag_03: THREE.SkinnedMesh
    bag_02: THREE.SkinnedMesh
    bag_01: THREE.SkinnedMesh
    exhaust_mesh: THREE.SkinnedMesh
    large_flash_boots: THREE.SkinnedMesh
    cape: THREE.SkinnedMesh
    large_jet_boots: THREE.SkinnedMesh
    large_wing_boots: THREE.SkinnedMesh
    root: THREE.Bone
  }
  materials: {
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
    ['default']: THREE.MeshStandardMaterial
  }
}

type ActionName = 'idle' | 'walk' | 'run' | 'jump_start' | 'jump_loop' | 'jump_end' | 'hero'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default React.forwardRef(function Model(
  {
    state,
    ...props
  }: GroupProps & {
    state: {
      moving: boolean
      velocity: THREE.Vector3
    }
  },
  ref
) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/character.glb') as GLTFResult
  const { actions, mixer } = useAnimations<GLTFActions>(animations, group)

  const animState = useRef({
    currentAnimation: '',
    direction: null,
  })

  useFrame(() => {
    try {
      const { currentAnimation } = animState.current
      const animation = state.moving ? 'run' : 'idle'

      if (currentAnimation !== animation) {
        actions[currentAnimation]?.fadeOut(0.1)
        actions[animation]?.reset().play().fadeIn(0.1)
        animState.current.currentAnimation = animation
      }

      if (state.velocity && state.moving && group.current) {
        const oldQuat = group.current.quaternion.clone()
        group.current.lookAt(group.current.getWorldPosition(vec3()).add(state.velocity))
        const newQuat = group.current.quaternion.clone()

        animState.current.direction = oldQuat.clone().slerp(newQuat, 0.1)
        group.current.quaternion.copy(animState.current.direction)
      }
    } catch (err) {
      console.error(err)
    }
  })

  useImperativeHandle(ref, () => ({
    mixer,
    root: group.current,
  }))

  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <primitive object={nodes.root} />
        <skinnedMesh
          name="body"
          geometry={nodes.body.geometry}
          material={materials['default']}
          skeleton={nodes.body.skeleton}
          position={[0, 1.03, 0]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="boots"
          geometry={nodes.boots.geometry}
          material={materials['default']}
          skeleton={nodes.boots.skeleton}
          position={[0.1, 0, 0.05]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        {/* <skinnedMesh
          name="lights_01"
          geometry={nodes.lights_01.geometry}
          material={materials["default"]}
          skeleton={nodes.lights_01.skeleton}
        />
        <skinnedMesh
          name="lights_02"
          geometry={nodes.lights_02.geometry}
          material={materials["default"]}
          skeleton={nodes.lights_02.skeleton}
        />
        <skinnedMesh
          name="lights_03"
          geometry={nodes.lights_03.geometry}
          material={materials["default"]}
          skeleton={nodes.lights_03.skeleton}
        />
        <skinnedMesh
          name="bag_03"
          geometry={nodes.bag_03.geometry}
          material={materials["default"]}
          skeleton={nodes.bag_03.skeleton}
          position={[0.09, 1.2, -0.35]}
        />
        <skinnedMesh
          name="bag_02"
          geometry={nodes.bag_02.geometry}
          material={materials["default"]}
          skeleton={nodes.bag_02.skeleton}
        />
        <skinnedMesh
          name="bag_01"
          geometry={nodes.bag_01.geometry}
          material={materials["default"]}
          skeleton={nodes.bag_01.skeleton}
        />
        <skinnedMesh
          name="exhaust_mesh"
          geometry={nodes.exhaust_mesh.geometry}
          material={materials["default"]}
          skeleton={nodes.exhaust_mesh.skeleton}
          position={[0.18, 0.03, -0.34]}
        /> */}
        {/* <skinnedMesh
          name="large_flash_boots"
          geometry={nodes.large_flash_boots.geometry}
          material={materials["default"]}
          skeleton={nodes.large_flash_boots.skeleton}
          position={[0.42, 0.01, 0]}
          scale={0.81}
        />
        <skinnedMesh
          name="cape"
          geometry={nodes.cape.geometry}
          material={materials["default"]}
          skeleton={nodes.cape.skeleton}
          position={[0, 0.01, 0.03]}
        />
        <skinnedMesh
          name="large_jet_boots"
          geometry={nodes.large_jet_boots.geometry}
          material={materials["default"]}
          skeleton={nodes.large_jet_boots.skeleton}
          position={[0, 0.2, 0.04]}
          scale={0.81}
        />
        <skinnedMesh
          name="large_wing_boots"
          geometry={nodes.large_wing_boots.geometry}
          material={materials["default"]}
          skeleton={nodes.large_wing_boots.skeleton}
          position={[0, 0.19, 0.01]}
          scale={0.81}
        /> */}
      </group>
    </group>
  )
})

useGLTF.preload('/character.glb')
